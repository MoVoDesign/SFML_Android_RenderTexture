/*
* mathUtils.h
*
* (c) 2016 Lio@MoVo-Design
*/


#ifndef MATHUTILS_H
#define MATHUTILS_H

#include <cfloat>
#define k_epsilon FLT_EPSILON

//#include <string>
//#include <cassert>

const float k_pi = 3.14159265358979323846264f;
const float k_2pi = 2.f * k_pi;
const float k_1pi4 = 0.25f * k_pi; // 1/4pi
const float k_3pi4 = 0.75f * k_pi; // 3/4pi

const float k_rad2deg = 180.f / k_pi;
const float k_deg2rad = k_pi / 180.f;

/// precision 0.1Â° (from 0.0 to 90.0)
const int k_s360 = 360 * 10; //
const int k_s90 = 90 * 10;
static float k_tSin90[k_s90 + 1] = {
   0.000000f, 0.001745f, 0.003491f, 0.005236f, 0.006981f, 0.008727f, 0.010472f, 0.012217f, 0.013962f, 0.015707f
  , 0.017452f, 0.019197f, 0.020942f, 0.022687f, 0.024432f, 0.026177f, 0.027922f, 0.029666f, 0.031411f, 0.033155f
  , 0.034899f, 0.036644f, 0.038388f, 0.040132f, 0.041876f, 0.043619f, 0.045363f, 0.047106f, 0.048850f, 0.050593f
  , 0.052336f, 0.054079f, 0.055822f, 0.057564f, 0.059306f, 0.061049f, 0.062791f, 0.064532f, 0.066274f, 0.068015f
  , 0.069756f, 0.071497f, 0.073238f, 0.074979f, 0.076719f, 0.078459f, 0.080199f, 0.081939f, 0.083678f, 0.085417f
  , 0.087156f, 0.088894f, 0.090633f, 0.092371f, 0.094108f, 0.095846f, 0.097583f, 0.099320f, 0.101056f, 0.102793f
  , 0.104528f, 0.106264f, 0.107999f, 0.109734f, 0.111469f, 0.113203f, 0.114937f, 0.116671f, 0.118404f, 0.120137f
  , 0.121869f, 0.123601f, 0.125333f, 0.127065f, 0.128796f, 0.130526f, 0.132256f, 0.133986f, 0.135716f, 0.137445f
  , 0.139173f, 0.140901f, 0.142629f, 0.144356f, 0.146083f, 0.147809f, 0.149535f, 0.151261f, 0.152986f, 0.154710f
  , 0.156434f, 0.158158f, 0.159881f, 0.161604f, 0.163326f, 0.165048f, 0.166769f, 0.168489f, 0.170209f, 0.171929f
  , 0.173648f, 0.175367f, 0.177085f, 0.178802f, 0.180519f, 0.182236f, 0.183951f, 0.185667f, 0.187381f, 0.189095f
  , 0.190809f, 0.192522f, 0.194234f, 0.195946f, 0.197657f, 0.199368f, 0.201078f, 0.202787f, 0.204496f, 0.206204f
  , 0.207912f, 0.209619f, 0.211325f, 0.213030f, 0.214735f, 0.216440f, 0.218143f, 0.219846f, 0.221548f, 0.223250f
  , 0.224951f, 0.226651f, 0.228351f, 0.230050f, 0.231748f, 0.233445f, 0.235142f, 0.236838f, 0.238533f, 0.240228f
  , 0.241922f, 0.243615f, 0.245307f, 0.246999f, 0.248690f, 0.250380f, 0.252069f, 0.253758f, 0.255446f, 0.257133f
  , 0.258819f, 0.260505f, 0.262189f, 0.263873f, 0.265556f, 0.267238f, 0.268920f, 0.270600f, 0.272280f, 0.273959f
  , 0.275637f, 0.277315f, 0.278991f, 0.280667f, 0.282341f, 0.284015f, 0.285688f, 0.287361f, 0.289032f, 0.290702f
  , 0.292372f, 0.294040f, 0.295708f, 0.297375f, 0.299041f, 0.300706f, 0.302370f, 0.304033f, 0.305695f, 0.307357f
  , 0.309017f, 0.310676f, 0.312335f, 0.313992f, 0.315649f, 0.317305f, 0.318959f, 0.320613f, 0.322266f, 0.323917f
  , 0.325568f, 0.327218f, 0.328867f, 0.330514f, 0.332161f, 0.333807f, 0.335452f, 0.337095f, 0.338738f, 0.340380f
  , 0.342020f, 0.343660f, 0.345298f, 0.346936f, 0.348572f, 0.350207f, 0.351842f, 0.353475f, 0.355107f, 0.356738f
  , 0.358368f, 0.359997f, 0.361625f, 0.363251f, 0.364877f, 0.366501f, 0.368125f, 0.369747f, 0.371368f, 0.372988f
  , 0.374607f, 0.376224f, 0.377841f, 0.379456f, 0.381070f, 0.382683f, 0.384295f, 0.385906f, 0.387516f, 0.389124f
  , 0.390731f, 0.392337f, 0.393942f, 0.395545f, 0.397148f, 0.398749f, 0.400349f, 0.401948f, 0.403545f, 0.405142f
  , 0.406737f, 0.408330f, 0.409923f, 0.411514f, 0.413104f, 0.414693f, 0.416281f, 0.417867f, 0.419452f, 0.421036f
  , 0.422618f, 0.424199f, 0.425779f, 0.427358f, 0.428935f, 0.430511f, 0.432086f, 0.433659f, 0.435231f, 0.436802f
  , 0.438371f, 0.439939f, 0.441506f, 0.443071f, 0.444635f, 0.446198f, 0.447759f, 0.449319f, 0.450878f, 0.452435f
  , 0.453990f, 0.455545f, 0.457098f, 0.458650f, 0.460200f, 0.461749f, 0.463296f, 0.464842f, 0.466387f, 0.467930f
  , 0.469472f, 0.471012f, 0.472551f, 0.474088f, 0.475624f, 0.477159f, 0.478692f, 0.480224f, 0.481754f, 0.483282f
  , 0.484810f, 0.486335f, 0.487860f, 0.489382f, 0.490904f, 0.492424f, 0.493942f, 0.495459f, 0.496974f, 0.498488f
  , 0.500000f, 0.501511f, 0.503020f, 0.504528f, 0.506034f, 0.507538f, 0.509041f, 0.510543f, 0.512043f, 0.513541f
  , 0.515038f, 0.516533f, 0.518027f, 0.519519f, 0.521010f, 0.522499f, 0.523986f, 0.525472f, 0.526956f, 0.528438f
  , 0.529919f, 0.531399f, 0.532876f, 0.534352f, 0.535827f, 0.537300f, 0.538771f, 0.540240f, 0.541708f, 0.543174f
  , 0.544639f, 0.546102f, 0.547563f, 0.549023f, 0.550481f, 0.551937f, 0.553392f, 0.554844f, 0.556296f, 0.557745f
  , 0.559193f, 0.560639f, 0.562083f, 0.563526f, 0.564967f, 0.566406f, 0.567844f, 0.569280f, 0.570714f, 0.572146f
  , 0.573576f, 0.575005f, 0.576432f, 0.577858f, 0.579281f, 0.580703f, 0.582123f, 0.583541f, 0.584958f, 0.586372f
  , 0.587785f, 0.589196f, 0.590606f, 0.592013f, 0.593419f, 0.594823f, 0.596225f, 0.597625f, 0.599024f, 0.600420f
  , 0.601815f, 0.603208f, 0.604599f, 0.605988f, 0.607376f, 0.608761f, 0.610145f, 0.611527f, 0.612907f, 0.614285f
  , 0.615662f, 0.617036f, 0.618408f, 0.619779f, 0.621148f, 0.622515f, 0.623880f, 0.625243f, 0.626604f, 0.627963f
  , 0.629320f, 0.630676f, 0.632029f, 0.633381f, 0.634731f, 0.636078f, 0.637424f, 0.638768f, 0.640110f, 0.641450f
  , 0.642788f, 0.644124f, 0.645458f, 0.646790f, 0.648120f, 0.649448f, 0.650774f, 0.652098f, 0.653421f, 0.654741f
  , 0.656059f, 0.657375f, 0.658689f, 0.660002f, 0.661312f, 0.662620f, 0.663926f, 0.665230f, 0.666532f, 0.667833f
  , 0.669131f, 0.670427f, 0.671721f, 0.673012f, 0.674302f, 0.675590f, 0.676876f, 0.678160f, 0.679441f, 0.680721f
  , 0.681998f, 0.683274f, 0.684547f, 0.685818f, 0.687088f, 0.688355f, 0.689619f, 0.690882f, 0.692143f, 0.693402f
  , 0.694658f, 0.695913f, 0.697165f, 0.698415f, 0.699663f, 0.700909f, 0.702153f, 0.703395f, 0.704634f, 0.705872f
  , 0.707107f, 0.708340f, 0.709571f, 0.710799f, 0.712026f, 0.713250f, 0.714473f, 0.715693f, 0.716911f, 0.718126f
  , 0.719340f, 0.720551f, 0.721760f, 0.722967f, 0.724172f, 0.725374f, 0.726575f, 0.727773f, 0.728969f, 0.730162f
  , 0.731354f, 0.732543f, 0.733730f, 0.734915f, 0.736097f, 0.737277f, 0.738455f, 0.739631f, 0.740805f, 0.741976f
  , 0.743145f, 0.744312f, 0.745476f, 0.746638f, 0.747798f, 0.748956f, 0.750111f, 0.751264f, 0.752415f, 0.753563f
  , 0.754710f, 0.755853f, 0.756995f, 0.758134f, 0.759271f, 0.760406f, 0.761538f, 0.762668f, 0.763796f, 0.764921f
  , 0.766044f, 0.767165f, 0.768284f, 0.769400f, 0.770513f, 0.771625f, 0.772734f, 0.773840f, 0.774944f, 0.776046f
  , 0.777146f, 0.778243f, 0.779338f, 0.780430f, 0.781520f, 0.782608f, 0.783693f, 0.784776f, 0.785857f, 0.786935f
  , 0.788011f, 0.789084f, 0.790155f, 0.791224f, 0.792290f, 0.793353f, 0.794415f, 0.795474f, 0.796530f, 0.797584f
  , 0.798636f, 0.799685f, 0.800731f, 0.801776f, 0.802817f, 0.803857f, 0.804894f, 0.805928f, 0.806960f, 0.807990f
  , 0.809017f, 0.810042f, 0.811064f, 0.812084f, 0.813101f, 0.814116f, 0.815128f, 0.816138f, 0.817145f, 0.818150f
  , 0.819152f, 0.820152f, 0.821149f, 0.822144f, 0.823136f, 0.824126f, 0.825113f, 0.826098f, 0.827081f, 0.828060f
  , 0.829038f, 0.830012f, 0.830984f, 0.831954f, 0.832921f, 0.833886f, 0.834848f, 0.835807f, 0.836764f, 0.837719f
  , 0.838671f, 0.839620f, 0.840567f, 0.841511f, 0.842452f, 0.843391f, 0.844328f, 0.845262f, 0.846193f, 0.847122f
  , 0.848048f, 0.848972f, 0.849893f, 0.850811f, 0.851727f, 0.852640f, 0.853551f, 0.854459f, 0.855364f, 0.856267f
  , 0.857167f, 0.858065f, 0.858960f, 0.859852f, 0.860742f, 0.861629f, 0.862514f, 0.863396f, 0.864275f, 0.865151f
  , 0.866025f, 0.866897f, 0.867765f, 0.868631f, 0.869495f, 0.870356f, 0.871214f, 0.872069f, 0.872922f, 0.873772f
  , 0.874620f, 0.875464f, 0.876307f, 0.877146f, 0.877983f, 0.878817f, 0.879649f, 0.880477f, 0.881303f, 0.882127f
  , 0.882948f, 0.883766f, 0.884581f, 0.885394f, 0.886204f, 0.887011f, 0.887815f, 0.888617f, 0.889416f, 0.890213f
  , 0.891007f, 0.891798f, 0.892586f, 0.893371f, 0.894154f, 0.894934f, 0.895712f, 0.896486f, 0.897258f, 0.898028f
  , 0.898794f, 0.899558f, 0.900319f, 0.901077f, 0.901833f, 0.902585f, 0.903335f, 0.904083f, 0.904827f, 0.905569f
  , 0.906308f, 0.907044f, 0.907777f, 0.908508f, 0.909236f, 0.909961f, 0.910684f, 0.911403f, 0.912120f, 0.912834f
  , 0.913545f, 0.914254f, 0.914960f, 0.915663f, 0.916363f, 0.917060f, 0.917755f, 0.918446f, 0.919135f, 0.919822f
  , 0.920505f, 0.921185f, 0.921863f, 0.922538f, 0.923210f, 0.923880f, 0.924546f, 0.925210f, 0.925871f, 0.926529f
  , 0.927184f, 0.927836f, 0.928486f, 0.929133f, 0.929776f, 0.930418f, 0.931056f, 0.931691f, 0.932324f, 0.932954f
  , 0.933580f, 0.934204f, 0.934826f, 0.935444f, 0.936060f, 0.936672f, 0.937282f, 0.937889f, 0.938493f, 0.939094f
  , 0.939693f, 0.940288f, 0.940881f, 0.941471f, 0.942057f, 0.942641f, 0.943223f, 0.943801f, 0.944376f, 0.944949f
  , 0.945519f, 0.946085f, 0.946649f, 0.947210f, 0.947768f, 0.948324f, 0.948876f, 0.949425f, 0.949972f, 0.950516f
  , 0.951057f, 0.951594f, 0.952129f, 0.952662f, 0.953191f, 0.953717f, 0.954240f, 0.954761f, 0.955278f, 0.955793f
  , 0.956305f, 0.956814f, 0.957319f, 0.957823f, 0.958323f, 0.958820f, 0.959314f, 0.959805f, 0.960294f, 0.960779f
  , 0.961262f, 0.961741f, 0.962218f, 0.962692f, 0.963163f, 0.963630f, 0.964095f, 0.964557f, 0.965016f, 0.965473f
  , 0.965926f, 0.966376f, 0.966823f, 0.967268f, 0.967709f, 0.968148f, 0.968583f, 0.969016f, 0.969445f, 0.969872f
  , 0.970296f, 0.970716f, 0.971134f, 0.971549f, 0.971961f, 0.972370f, 0.972776f, 0.973179f, 0.973579f, 0.973976f
  , 0.974370f, 0.974761f, 0.975149f, 0.975535f, 0.975917f, 0.976296f, 0.976672f, 0.977046f, 0.977416f, 0.977783f
  , 0.978148f, 0.978509f, 0.978867f, 0.979223f, 0.979575f, 0.979925f, 0.980271f, 0.980615f, 0.980955f, 0.981293f
  , 0.981627f, 0.981959f, 0.982287f, 0.982613f, 0.982935f, 0.983255f, 0.983571f, 0.983885f, 0.984196f, 0.984503f
  , 0.984808f, 0.985109f, 0.985408f, 0.985703f, 0.985996f, 0.986286f, 0.986572f, 0.986856f, 0.987136f, 0.987414f
  , 0.987688f, 0.987960f, 0.988228f, 0.988494f, 0.988756f, 0.989016f, 0.989272f, 0.989526f, 0.989776f, 0.990024f
  , 0.990268f, 0.990509f, 0.990748f, 0.990983f, 0.991216f, 0.991445f, 0.991671f, 0.991894f, 0.992115f, 0.992332f
  , 0.992546f, 0.992757f, 0.992966f, 0.993171f, 0.993373f, 0.993572f, 0.993768f, 0.993961f, 0.994151f, 0.994338f
  , 0.994522f, 0.994703f, 0.994881f, 0.995056f, 0.995227f, 0.995396f, 0.995562f, 0.995725f, 0.995884f, 0.996041f
  , 0.996195f, 0.996345f, 0.996493f, 0.996637f, 0.996779f, 0.996917f, 0.997053f, 0.997185f, 0.997314f, 0.997441f
  , 0.997564f, 0.997684f, 0.997801f, 0.997916f, 0.998027f, 0.998135f, 0.998240f, 0.998342f, 0.998441f, 0.998537f
  , 0.998630f, 0.998719f, 0.998806f, 0.998890f, 0.998971f, 0.999048f, 0.999123f, 0.999194f, 0.999263f, 0.999328f
  , 0.999391f, 0.999450f, 0.999507f, 0.999560f, 0.999610f, 0.999657f, 0.999701f, 0.999743f, 0.999781f, 0.999816f
  , 0.999848f, 0.999877f, 0.999903f, 0.999925f, 0.999945f, 0.999962f, 0.999976f, 0.999986f, 0.999994f, 0.999998f
  , 1.f
};


namespace mu { // mathUtils name space (to avoid conflicts with cmath
  template <typename T> T abs(T a) { return a > static_cast<T>(0) ? a : -a; }
  inline float round(float x) { return static_cast<float>(static_cast<int>(x + 0.5f)); }
  inline float floor(float x) { return static_cast<float>(static_cast<int>(x)); }
  inline float ceil(float x) { return static_cast<float>(static_cast<int>(x +  0.99f)); } // significant = 0.01
  template <typename T> T min(T a, T b) { return a < b ? a : b; }
  template <typename T> T max(T a, T b) { return a > b ? a : b; }
  
  template <typename T> T sign(T x) { return x < static_cast<T>(0) ? static_cast<T>(-1) : static_cast<T>(1); }
  template <typename T> T clamp(T a, T low, T high) { return max(low, min(a, high)); }
  
  //=== FAST ARCTAN approx
  // atan(y/x) -> rad
  inline float atan2(float y, float x) {
    float r, ang;
    float ay = (y > 0.f) ? y : -y;
    if (x < 0.0f) {
      r = (x + ay) / (ay - x); // denom always > 0
      ang = k_3pi4;
      
    } else {
      float den = x + ay;
      if (den == 0.f) { return 0.f; }
      r = (x - ay) / (x + ay);
      ang = k_1pi4;
    }
    ang += (0.1963f * r * r - 0.9817f) * r;
    return ((y < 0.f) ? -ang : ang);
  }
  
  //=== FAST SQUARE ROOT Approx
  //--- fast inverse square root (genius at work) 1/sqrt(aF)
  // by the creator of Quake 3 (John Carmack) or Gary Tarolli (Nvidia) tbc.
  // in any case Genius at work. Grand explanation about the magic number by Chris Lomont
  inline float invSqrt(float aF)
  {
    //assert(aF > 0.f);
    float xhalf = 0.5f * aF;
    int i = *(int*)&aF;            // store floating-point bits in integer
    i = 0x5f3759df - (i >> 1);    // initial guess for Newton's method (original: 0x5f3759df) vs. 0x5f375a86
    aF = *(float*)&i;              // convert new bits into float
    aF = aF * (1.5f - xhalf * aF * aF);     // One round of Newton's method
    aF = aF * (1.5f - xhalf * aF * aF);     // Two rounds of Newton's method for a better result (can do without)
    return aF;
  }
  
  
  //--- FAST square root
  inline float sqrt(float aF)
  {
    if (aF < k_epsilon) { return 0.f; } // no sqrt for negative numbers
    return 1.f / invSqrt(aF);
  }
  
  // normalize an angle in radians between -pi and pi
  //  The result is in the [-180, 180) interval.
  // For (-180, 180] interval, use ceil instead of floor
  inline float normalizeRad(float a)
  {
    return a - mu::floor(a / k_2pi) * k_2pi;
  }
  
  inline float normalizeDeg(float a)
  {
    return a - mu::floor(a / 360.f) * 360.f;
  }
  
  
  //=== FAST SIN / COS
  inline float sin(float a_deg)
  {
    // normalize to [0-360]
    int iang = static_cast<int>(a_deg * 10.f) % k_s360;
    if (iang < 0) { iang += k_s360; }
    int q = iang / k_s90; // quadrant
    iang = iang % k_s90;
    float sinv = k_tSin90[(q % 2 == 0) ? iang : (k_s90 - iang)];
    // sin negative for quadrants 2 and 3
    return (q > 1) ? -sinv : sinv;
  }

  inline float cos(float a_deg)
  {
    // normalize to [0-360]
    int iang = static_cast<int>(a_deg * 10.f) % k_s360;
    if (iang < 0) { iang += k_s360; }
    int q = iang / k_s90; // quadrant
    iang = iang % k_s90;
    float cosv = k_tSin90[(q % 2 == 1) ? iang : (k_s90 - iang)];
    // cos negative for quadrants 1 and 2
    return (q % 3 > 0) ? -cosv : cosv;
  }

  //=== FAST LOG2 approx
  // http://www.flipcode.com/archives/Fast_log_Function.shtml
  // Laurent de Soras
  inline float log2(float a_v)
  {
    union { float v; std::int32_t x; } u = { a_v };
    float log_2 = (float)(((u.x >> 23) & 255) - 128);
    u.x   &= ~(255 << 23);
    u.x   += 127 << 23;
    //log_2 += ((-0.3358287811f) * u.val + 2.0f) * u.val  -0.65871759316667f;
    log_2 += ((-0.34484843f) * u.v + 2.02466578f) * u.v - 0.67487759f;
    return (log_2);
  }
  
  
  
  //=== easing
  // quadratic easing in - accelerating from zero velocity
  // ** *  *   *     *
  inline float easeInQuad(float a_t, float a_tEnd)
  {
    float t = a_t / a_tEnd;
    return t * t;
  }

  // quadratic easing out - decelerating to zero velocity
  // *     *   *  * **
  inline float easeOutQuad(float a_t, float a_tEnd)
  {
    float t = a_t / a_tEnd;
    return -t * (t - 2.f);
  }

  inline float easeInOutQuad(float a_t, float a_tEnd)
  // ** *  *   *     *|*     *   *  * **
  {
    float t = a_t / (0.5f * a_tEnd);
    if (t < 1.f) {
      return (0.5f * t * t);
    }
  
    t -= 1.f;
    return (-.5f * (t * (t - 2.f) -1.f));
  }
  
  
  inline float easeOutInQuad(float a_t, float a_tEnd)
  // *     *   *  * **|** *  *   *     *
  {
    if (a_t < .5f * a_tEnd) {
      return .5f * easeOutQuad(2.f * a_t, a_tEnd);
    } else {
      return .5f + .5f * easeInQuad((2.f * a_t) - a_tEnd, a_tEnd);
    }
  }
  
  
  
  
  
  inline float rand01() {
    return static_cast<float>(rand() % 1000) * 0.001f;
  }
  
  inline float pulse01(float a_a01) {
    // ** *  *   *     *|*     *   *  * **
    return .5f * (sin(a_a01 * 360.f + 270.f) + 1.f);
  }
  
  
  
  
  
  
  
}//eo-namespace

#endif
